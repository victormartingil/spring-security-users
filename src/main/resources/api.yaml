openapi: 3.0.3
info:
  title: Users API - OpenAPI 3.0
  description: User API microservice with Spring Security
  contact:
    email: victormartingil@gmail.com
  version: 1.0.0
externalDocs:
  description: Find out more about my repositories
  url: http://www.github.com/victormartingil
tags:
  - name: user
    description: Everything about Users
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserQuery'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserResponse'
  /user/{email}:
    get:
      tags:
        - user
      summary: Get user by email
      description: Get user by email
      operationId: getUserByEmail
      parameters:
        - name: email
          in: path
          description: 'The email of the user.'
          required: true
          schema:
            type: string
            format: email
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: email
          in: path
          description: email to find the user to be updated
          required: true
          schema:
            type: string
            format: email
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserQuery'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: email
          in: path
          description: The email to delete this user
          required: true
          schema:
            type: string
            format: email
      responses:
        '201':
          description: Deleted successfully
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    UserResponse:
      type: object
      properties:
        id:
          type: string
          example: 123434532
        username:
          type: string
          example: theUser
        email:
          type: string
          example: test@email.com
        enabled:
          type: boolean
          example: true
    UserQuery:
      type: object
      properties:
        username:
          type: string
          example: theUser
        password:
          type: string
          example: '12345'
        email:
          type: string
          example: test@email.com
        roleType:
          type: object
          $ref: '#components/schemas/RuleType'
    RoleType:
      title: RoleType
      type: string
      description: The Role of the User
      enum:
        - BASIC
        - ADMIN
        - SUPERADMIN